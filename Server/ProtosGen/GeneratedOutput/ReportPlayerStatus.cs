// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: report_player_status.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OmniBot.ActionRpg.Game.Requests {

  /// <summary>Holder for reflection information generated from report_player_status.proto</summary>
  public static partial class ReportPlayerStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for report_player_status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReportPlayerStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpyZXBvcnRfcGxheWVyX3N0YXR1cy5wcm90bxIeb21uaWJvdC5hY3Rpb25y",
            "cGcuZ2FtZS5pbnRlcm9wItwCChdSZXBvcnRQbGF5ZXJTdGF0dXNJbnB1dBIS",
            "CgptZXNzYWdlX2lkGAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoCRIOCgZoZWFs",
            "dGgYAyABKAUSDAoEbWFuYRgEIAEoBRIPCgdzdGFtaW5hGAUgASgFEgwKBHpv",
            "bmUYBiABKAkSDgoGcmVnaW9uGAcgASgJEg0KBWxvY2FsGAggASgJEgwKBHBv",
            "c1gYCSABKAISDAoEcG9zWRgKIAEoAhIMCgRwb3NaGAsgASgCEhAKCGlzTW92",
            "aW5nGAwgASgIEhIKCmlzR3JvdW5kZWQYDSABKAgSEAoIaXNBaW1pbmcYDiAB",
            "KAgSEwoLaXNBdHRhY2tpbmcYDyABKAgSEQoJYW5pbWF0aW9uGBAgASgJEhoK",
            "EmFuaW1hdGlvblN0YXJ0VGltZRgRIAEoCRIYChBhbmltYXRpb25FbmRUaW1l",
            "GBIgASgJInMKGFJlcG9ydFBsYXllclN0YXR1c091dHB1dBISCgptZXNzYWdl",
            "X2lkGAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoCRIeChZyZXNwb25zZV90b19t",
            "ZXNzYWdlX2lkGAMgASgJEhAKCGFjY2VwdGVkGAQgASgIQiKqAh9PbW5pQm90",
            "LkFjdGlvblJwZy5HYW1lLlJlcXVlc3RzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput), global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput.Parser, new[]{ "MessageId", "Timestamp", "Health", "Mana", "Stamina", "Zone", "Region", "Local", "PosX", "PosY", "PosZ", "IsMoving", "IsGrounded", "IsAiming", "IsAttacking", "Animation", "AnimationStartTime", "AnimationEndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput), global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput.Parser, new[]{ "MessageId", "Timestamp", "ResponseToMessageId", "Accepted" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReportPlayerStatusInput : pb::IMessage<ReportPlayerStatusInput> {
    private static readonly pb::MessageParser<ReportPlayerStatusInput> _parser = new pb::MessageParser<ReportPlayerStatusInput>(() => new ReportPlayerStatusInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportPlayerStatusInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerStatusInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerStatusInput(ReportPlayerStatusInput other) : this() {
      messageId_ = other.messageId_;
      timestamp_ = other.timestamp_;
      health_ = other.health_;
      mana_ = other.mana_;
      stamina_ = other.stamina_;
      zone_ = other.zone_;
      region_ = other.region_;
      local_ = other.local_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      isMoving_ = other.isMoving_;
      isGrounded_ = other.isGrounded_;
      isAiming_ = other.isAiming_;
      isAttacking_ = other.isAttacking_;
      animation_ = other.animation_;
      animationStartTime_ = other.animationStartTime_;
      animationEndTime_ = other.animationEndTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerStatusInput Clone() {
      return new ReportPlayerStatusInput(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// Unique identifier for message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private string timestamp_ = "";
    /// <summary>
    /// Timestamp of message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 3;
    private int health_;
    /// <summary>
    /// Player health
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "mana" field.</summary>
    public const int ManaFieldNumber = 4;
    private int mana_;
    /// <summary>
    /// Player mana
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mana {
      get { return mana_; }
      set {
        mana_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 5;
    private int stamina_;
    /// <summary>
    /// Player stamina
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 6;
    private string zone_ = "";
    /// <summary>
    /// Zone a player is located (IE: World)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zone {
      get { return zone_; }
      set {
        zone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 7;
    private string region_ = "";
    /// <summary>
    /// Region a player is located (IE: Map)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 8;
    private string local_ = "";
    /// <summary>
    /// Local proximity to the player, (IE: Hex) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Local {
      get { return local_; }
      set {
        local_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 9;
    private float posX_;
    /// <summary>
    /// X position of player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 10;
    private float posY_;
    /// <summary>
    /// Y position of player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "posZ" field.</summary>
    public const int PosZFieldNumber = 11;
    private float posZ_;
    /// <summary>
    /// Z position of player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "isMoving" field.</summary>
    public const int IsMovingFieldNumber = 12;
    private bool isMoving_;
    /// <summary>
    /// Is the player moving?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMoving {
      get { return isMoving_; }
      set {
        isMoving_ = value;
      }
    }

    /// <summary>Field number for the "isGrounded" field.</summary>
    public const int IsGroundedFieldNumber = 13;
    private bool isGrounded_;
    /// <summary>
    /// Is the player on the ground?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGrounded {
      get { return isGrounded_; }
      set {
        isGrounded_ = value;
      }
    }

    /// <summary>Field number for the "isAiming" field.</summary>
    public const int IsAimingFieldNumber = 14;
    private bool isAiming_;
    /// <summary>
    /// Is the player aiming?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAiming {
      get { return isAiming_; }
      set {
        isAiming_ = value;
      }
    }

    /// <summary>Field number for the "isAttacking" field.</summary>
    public const int IsAttackingFieldNumber = 15;
    private bool isAttacking_;
    /// <summary>
    /// Is the player attacking?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttacking {
      get { return isAttacking_; }
      set {
        isAttacking_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 16;
    private string animation_ = "";
    /// <summary>
    /// Current animation being played
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Animation {
      get { return animation_; }
      set {
        animation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "animationStartTime" field.</summary>
    public const int AnimationStartTimeFieldNumber = 17;
    private string animationStartTime_ = "";
    /// <summary>
    /// When did the animation start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimationStartTime {
      get { return animationStartTime_; }
      set {
        animationStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "animationEndTime" field.</summary>
    public const int AnimationEndTimeFieldNumber = 18;
    private string animationEndTime_ = "";
    /// <summary>
    /// Expected end time for the animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimationEndTime {
      get { return animationEndTime_; }
      set {
        animationEndTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportPlayerStatusInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportPlayerStatusInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Health != other.Health) return false;
      if (Mana != other.Mana) return false;
      if (Stamina != other.Stamina) return false;
      if (Zone != other.Zone) return false;
      if (Region != other.Region) return false;
      if (Local != other.Local) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (IsMoving != other.IsMoving) return false;
      if (IsGrounded != other.IsGrounded) return false;
      if (IsAiming != other.IsAiming) return false;
      if (IsAttacking != other.IsAttacking) return false;
      if (Animation != other.Animation) return false;
      if (AnimationStartTime != other.AnimationStartTime) return false;
      if (AnimationEndTime != other.AnimationEndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Mana != 0) hash ^= Mana.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (Zone.Length != 0) hash ^= Zone.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Local.Length != 0) hash ^= Local.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (IsMoving != false) hash ^= IsMoving.GetHashCode();
      if (IsGrounded != false) hash ^= IsGrounded.GetHashCode();
      if (IsAiming != false) hash ^= IsAiming.GetHashCode();
      if (IsAttacking != false) hash ^= IsAttacking.GetHashCode();
      if (Animation.Length != 0) hash ^= Animation.GetHashCode();
      if (AnimationStartTime.Length != 0) hash ^= AnimationStartTime.GetHashCode();
      if (AnimationEndTime.Length != 0) hash ^= AnimationEndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Timestamp);
      }
      if (Health != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Health);
      }
      if (Mana != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mana);
      }
      if (Stamina != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stamina);
      }
      if (Zone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Zone);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Region);
      }
      if (Local.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Local);
      }
      if (PosX != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(PosZ);
      }
      if (IsMoving != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsMoving);
      }
      if (IsGrounded != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsGrounded);
      }
      if (IsAiming != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsAiming);
      }
      if (IsAttacking != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsAttacking);
      }
      if (Animation.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Animation);
      }
      if (AnimationStartTime.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AnimationStartTime);
      }
      if (AnimationEndTime.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AnimationEndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Mana != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mana);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
      }
      if (Zone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zone);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Local.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Local);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (IsMoving != false) {
        size += 1 + 1;
      }
      if (IsGrounded != false) {
        size += 1 + 1;
      }
      if (IsAiming != false) {
        size += 1 + 1;
      }
      if (IsAttacking != false) {
        size += 1 + 1;
      }
      if (Animation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Animation);
      }
      if (AnimationStartTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnimationStartTime);
      }
      if (AnimationEndTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnimationEndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportPlayerStatusInput other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Mana != 0) {
        Mana = other.Mana;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.Zone.Length != 0) {
        Zone = other.Zone;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Local.Length != 0) {
        Local = other.Local;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.IsMoving != false) {
        IsMoving = other.IsMoving;
      }
      if (other.IsGrounded != false) {
        IsGrounded = other.IsGrounded;
      }
      if (other.IsAiming != false) {
        IsAiming = other.IsAiming;
      }
      if (other.IsAttacking != false) {
        IsAttacking = other.IsAttacking;
      }
      if (other.Animation.Length != 0) {
        Animation = other.Animation;
      }
      if (other.AnimationStartTime.Length != 0) {
        AnimationStartTime = other.AnimationStartTime;
      }
      if (other.AnimationEndTime.Length != 0) {
        AnimationEndTime = other.AnimationEndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            Timestamp = input.ReadString();
            break;
          }
          case 24: {
            Health = input.ReadInt32();
            break;
          }
          case 32: {
            Mana = input.ReadInt32();
            break;
          }
          case 40: {
            Stamina = input.ReadInt32();
            break;
          }
          case 50: {
            Zone = input.ReadString();
            break;
          }
          case 58: {
            Region = input.ReadString();
            break;
          }
          case 66: {
            Local = input.ReadString();
            break;
          }
          case 77: {
            PosX = input.ReadFloat();
            break;
          }
          case 85: {
            PosY = input.ReadFloat();
            break;
          }
          case 93: {
            PosZ = input.ReadFloat();
            break;
          }
          case 96: {
            IsMoving = input.ReadBool();
            break;
          }
          case 104: {
            IsGrounded = input.ReadBool();
            break;
          }
          case 112: {
            IsAiming = input.ReadBool();
            break;
          }
          case 120: {
            IsAttacking = input.ReadBool();
            break;
          }
          case 130: {
            Animation = input.ReadString();
            break;
          }
          case 138: {
            AnimationStartTime = input.ReadString();
            break;
          }
          case 146: {
            AnimationEndTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportPlayerStatusOutput : pb::IMessage<ReportPlayerStatusOutput> {
    private static readonly pb::MessageParser<ReportPlayerStatusOutput> _parser = new pb::MessageParser<ReportPlayerStatusOutput>(() => new ReportPlayerStatusOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportPlayerStatusOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerStatusOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerStatusOutput(ReportPlayerStatusOutput other) : this() {
      messageId_ = other.messageId_;
      timestamp_ = other.timestamp_;
      responseToMessageId_ = other.responseToMessageId_;
      accepted_ = other.accepted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerStatusOutput Clone() {
      return new ReportPlayerStatusOutput(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_to_message_id" field.</summary>
    public const int ResponseToMessageIdFieldNumber = 3;
    private string responseToMessageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResponseToMessageId {
      get { return responseToMessageId_; }
      set {
        responseToMessageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accepted" field.</summary>
    public const int AcceptedFieldNumber = 4;
    private bool accepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accepted {
      get { return accepted_; }
      set {
        accepted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportPlayerStatusOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportPlayerStatusOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ResponseToMessageId != other.ResponseToMessageId) return false;
      if (Accepted != other.Accepted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (ResponseToMessageId.Length != 0) hash ^= ResponseToMessageId.GetHashCode();
      if (Accepted != false) hash ^= Accepted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Timestamp);
      }
      if (ResponseToMessageId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResponseToMessageId);
      }
      if (Accepted != false) {
        output.WriteRawTag(32);
        output.WriteBool(Accepted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (ResponseToMessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResponseToMessageId);
      }
      if (Accepted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportPlayerStatusOutput other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ResponseToMessageId.Length != 0) {
        ResponseToMessageId = other.ResponseToMessageId;
      }
      if (other.Accepted != false) {
        Accepted = other.Accepted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            Timestamp = input.ReadString();
            break;
          }
          case 26: {
            ResponseToMessageId = input.ReadString();
            break;
          }
          case 32: {
            Accepted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
