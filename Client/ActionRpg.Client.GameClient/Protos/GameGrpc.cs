// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace OmniBot.ActionRpg.Game.Requests {
  public static partial class ActionRpgGame
  {
    static readonly string __ServiceName = "omnibot.actionrpg.game.interop.ActionRpgGame";

    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ConnectInput> __Marshaller_omnibot_actionrpg_game_interop_ConnectInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ConnectInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ConnectOutput> __Marshaller_omnibot_actionrpg_game_interop_ConnectOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ConnectOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.DisconnectInput> __Marshaller_omnibot_actionrpg_game_interop_DisconnectInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.DisconnectInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput> __Marshaller_omnibot_actionrpg_game_interop_DisconnectOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.PingInput> __Marshaller_omnibot_actionrpg_game_interop_PingInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.PingInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.PingOutput> __Marshaller_omnibot_actionrpg_game_interop_PingOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.PingOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput> __Marshaller_omnibot_actionrpg_game_interop_ReportPlayerStatusInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput> __Marshaller_omnibot_actionrpg_game_interop_ReportPlayerStatusOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.SendChatInput> __Marshaller_omnibot_actionrpg_game_interop_SendChatInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.SendChatInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.SendChatOutput> __Marshaller_omnibot_actionrpg_game_interop_SendChatOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.SendChatOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput> __Marshaller_omnibot_actionrpg_game_interop_ReportZoneChangeInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput> __Marshaller_omnibot_actionrpg_game_interop_ReportZoneChangeOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput> __Marshaller_omnibot_actionrpg_game_interop_ReportRegionChangeInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput> __Marshaller_omnibot_actionrpg_game_interop_ReportRegionChangeOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput> __Marshaller_omnibot_actionrpg_game_interop_ReportLocalAreaChangeInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput> __Marshaller_omnibot_actionrpg_game_interop_ReportLocalAreaChangeOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput.Parser.ParseFrom);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ConnectInput, global::OmniBot.ActionRpg.Game.Requests.ConnectOutput> __Method_Connect = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ConnectInput, global::OmniBot.ActionRpg.Game.Requests.ConnectOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_omnibot_actionrpg_game_interop_ConnectInput,
        __Marshaller_omnibot_actionrpg_game_interop_ConnectOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.DisconnectInput, global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput> __Method_Disconnect = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.DisconnectInput, global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_omnibot_actionrpg_game_interop_DisconnectInput,
        __Marshaller_omnibot_actionrpg_game_interop_DisconnectOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.PingInput, global::OmniBot.ActionRpg.Game.Requests.PingOutput> __Method_Ping = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.PingInput, global::OmniBot.ActionRpg.Game.Requests.PingOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_omnibot_actionrpg_game_interop_PingInput,
        __Marshaller_omnibot_actionrpg_game_interop_PingOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput, global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput> __Method_ReportPlayerStatus = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput, global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportPlayerStatus",
        __Marshaller_omnibot_actionrpg_game_interop_ReportPlayerStatusInput,
        __Marshaller_omnibot_actionrpg_game_interop_ReportPlayerStatusOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.SendChatInput, global::OmniBot.ActionRpg.Game.Requests.SendChatOutput> __Method_SendChatMessage = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.SendChatInput, global::OmniBot.ActionRpg.Game.Requests.SendChatOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendChatMessage",
        __Marshaller_omnibot_actionrpg_game_interop_SendChatInput,
        __Marshaller_omnibot_actionrpg_game_interop_SendChatOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput> __Method_ReportZoneChange = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportZoneChange",
        __Marshaller_omnibot_actionrpg_game_interop_ReportZoneChangeInput,
        __Marshaller_omnibot_actionrpg_game_interop_ReportZoneChangeOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput> __Method_ReportRegionChange = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportRegionChange",
        __Marshaller_omnibot_actionrpg_game_interop_ReportRegionChangeInput,
        __Marshaller_omnibot_actionrpg_game_interop_ReportRegionChangeOutput);

    static readonly grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput> __Method_ReportLocalAreaChange = new grpc::Method<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportLocalAreaChange",
        __Marshaller_omnibot_actionrpg_game_interop_ReportLocalAreaChangeInput,
        __Marshaller_omnibot_actionrpg_game_interop_ReportLocalAreaChangeOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::OmniBot.ActionRpg.Game.Requests.GameReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ActionRpgGame</summary>
    [grpc::BindServiceMethod(typeof(ActionRpgGame), "BindService")]
    public abstract partial class ActionRpgGameBase
    {
      /// <summary>
      ///***********
      /// Server Features
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.ConnectOutput> Connect(global::OmniBot.ActionRpg.Game.Requests.ConnectInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput> Disconnect(global::OmniBot.ActionRpg.Game.Requests.DisconnectInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.PingOutput> Ping(global::OmniBot.ActionRpg.Game.Requests.PingInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///***********
      /// Game Features
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput> ReportPlayerStatus(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.SendChatOutput> SendChatMessage(global::OmniBot.ActionRpg.Game.Requests.SendChatInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///***********
      /// Navigation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput> ReportZoneChange(global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput> ReportRegionChange(global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput> ReportLocalAreaChange(global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ActionRpgGame</summary>
    public partial class ActionRpgGameClient : grpc::ClientBase<ActionRpgGameClient>
    {
      /// <summary>Creates a new client for ActionRpgGame</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ActionRpgGameClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ActionRpgGame that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ActionRpgGameClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ActionRpgGameClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ActionRpgGameClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///***********
      /// Server Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OmniBot.ActionRpg.Game.Requests.ConnectOutput Connect(global::OmniBot.ActionRpg.Game.Requests.ConnectInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///***********
      /// Server Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OmniBot.ActionRpg.Game.Requests.ConnectOutput Connect(global::OmniBot.ActionRpg.Game.Requests.ConnectInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      ///***********
      /// Server Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ConnectOutput> ConnectAsync(global::OmniBot.ActionRpg.Game.Requests.ConnectInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///***********
      /// Server Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ConnectOutput> ConnectAsync(global::OmniBot.ActionRpg.Game.Requests.ConnectInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput Disconnect(global::OmniBot.ActionRpg.Game.Requests.DisconnectInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput Disconnect(global::OmniBot.ActionRpg.Game.Requests.DisconnectInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput> DisconnectAsync(global::OmniBot.ActionRpg.Game.Requests.DisconnectInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput> DisconnectAsync(global::OmniBot.ActionRpg.Game.Requests.DisconnectInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.PingOutput Ping(global::OmniBot.ActionRpg.Game.Requests.PingInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.PingOutput Ping(global::OmniBot.ActionRpg.Game.Requests.PingInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.PingOutput> PingAsync(global::OmniBot.ActionRpg.Game.Requests.PingInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.PingOutput> PingAsync(global::OmniBot.ActionRpg.Game.Requests.PingInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      ///***********
      /// Game Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput ReportPlayerStatus(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportPlayerStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///***********
      /// Game Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput ReportPlayerStatus(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportPlayerStatus, null, options, request);
      }
      /// <summary>
      ///***********
      /// Game Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput> ReportPlayerStatusAsync(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportPlayerStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///***********
      /// Game Features
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput> ReportPlayerStatusAsync(global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportPlayerStatus, null, options, request);
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.SendChatOutput SendChatMessage(global::OmniBot.ActionRpg.Game.Requests.SendChatInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendChatMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.SendChatOutput SendChatMessage(global::OmniBot.ActionRpg.Game.Requests.SendChatInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendChatMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.SendChatOutput> SendChatMessageAsync(global::OmniBot.ActionRpg.Game.Requests.SendChatInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendChatMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.SendChatOutput> SendChatMessageAsync(global::OmniBot.ActionRpg.Game.Requests.SendChatInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendChatMessage, null, options, request);
      }
      /// <summary>
      ///***********
      /// Navigation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput ReportZoneChange(global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportZoneChange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///***********
      /// Navigation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput ReportZoneChange(global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportZoneChange, null, options, request);
      }
      /// <summary>
      ///***********
      /// Navigation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput> ReportZoneChangeAsync(global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportZoneChangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///***********
      /// Navigation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput> ReportZoneChangeAsync(global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportZoneChange, null, options, request);
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput ReportRegionChange(global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportRegionChange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput ReportRegionChange(global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportRegionChange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput> ReportRegionChangeAsync(global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportRegionChangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput> ReportRegionChangeAsync(global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportRegionChange, null, options, request);
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput ReportLocalAreaChange(global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportLocalAreaChange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput ReportLocalAreaChange(global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportLocalAreaChange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput> ReportLocalAreaChangeAsync(global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportLocalAreaChangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput> ReportLocalAreaChangeAsync(global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportLocalAreaChange, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ActionRpgGameClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ActionRpgGameClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ActionRpgGameBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_ReportPlayerStatus, serviceImpl.ReportPlayerStatus)
          .AddMethod(__Method_SendChatMessage, serviceImpl.SendChatMessage)
          .AddMethod(__Method_ReportZoneChange, serviceImpl.ReportZoneChange)
          .AddMethod(__Method_ReportRegionChange, serviceImpl.ReportRegionChange)
          .AddMethod(__Method_ReportLocalAreaChange, serviceImpl.ReportLocalAreaChange).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ActionRpgGameBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.ConnectInput, global::OmniBot.ActionRpg.Game.Requests.ConnectOutput>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.DisconnectInput, global::OmniBot.ActionRpg.Game.Requests.DisconnectOutput>(serviceImpl.Disconnect));
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.PingInput, global::OmniBot.ActionRpg.Game.Requests.PingOutput>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_ReportPlayerStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusInput, global::OmniBot.ActionRpg.Game.Requests.ReportPlayerStatusOutput>(serviceImpl.ReportPlayerStatus));
      serviceBinder.AddMethod(__Method_SendChatMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.SendChatInput, global::OmniBot.ActionRpg.Game.Requests.SendChatOutput>(serviceImpl.SendChatMessage));
      serviceBinder.AddMethod(__Method_ReportZoneChange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportZoneChangeOutput>(serviceImpl.ReportZoneChange));
      serviceBinder.AddMethod(__Method_ReportRegionChange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportRegionChangeOutput>(serviceImpl.ReportRegionChange));
      serviceBinder.AddMethod(__Method_ReportLocalAreaChange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeInput, global::OmniBot.ActionRpg.Game.Requests.ReportLocalAreaChangeOutput>(serviceImpl.ReportLocalAreaChange));
    }

  }
}
#endregion
